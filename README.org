* RSS Funnel

The RSS Funnel is a simple yet highly configurable RSS processing pipeline. It is designed to be used to modify existing RSS source in various interesting ways such as:

- Fetch full content of the article
- Remove unwanted elements from the article (using a CSS selector)
- Redact or replace text in the article (using a regular expression)
- Split a single RSS article into multiple articles
- Run arbitrary JS code to transform the article

** Installation

You can download =rss-funnel= binary from the releases page. Alternatively, you can build it from source:

#+begin_src
cargo build --release
#+end_src

** Usage

To use `rss-funnel`, you need to supply a configuration file in YAML. Here is an example configuration.

#+begin_src yaml
endpoints:
  - path: /tokio-blog.xml
    note: Full text of Tokio blog
    source: https://tokio.rs/_next/static/feed.xml
    filters:
      - full_text: {}
      - simplify_html: {}

  - path: /solidot.xml
    note: Solidot news with links
    source: https://www.solidot.org/index.rss
    filters:
      - full_text: {}
      - keep_element: .p_mainnew
      - simplify_html: {}
      - sanitize:
          - replace_regex:
              from: "(?<link>http(s)?://[^< \n]*)"
              to: '<a href="$link">$link</a>'

  - path: /inspect.xml
    note: Utility for inspecting RSS feeds
    filters:
      - js: |
          function update_post(feed, post) {
            post.content = `<pre>${JSON.stringify(post, null, 2)}</pre>`;
            return post;
          }

  - path: /hackernews.xml
    note: Full text of Hacker News
    source: https://news.ycombinator.com/rss
    filters:
      - full_text:
          simplify: true
          append_mode: true
#+end_src

Save above file to =/path/to/funnel.yaml= and run the following command:

#+begin_src
rss-funnel -c /path/to/funnel.yaml server
#+end_src

You can optionally specify the bind address and port (default =127.0.0.1:4080=). Detailed usage can be found in =--help= output.

The endpoints like =http://127.0.0.1:4080/tokio-blog.xml= should be serving the filtered feeds.

** Endpoint

Each of the configuration contains a number of endpoints. Each endpoint correspond to a RSS feed.

Properties:

- =path= (required): The path of the endpoint. The path should start with =/=.
- =note= (optional): A note for the endpoint. Only used for display purpose.
- =source= (optional): The source url of the RSS feed.
  + If not specified, you must specify =?source=<url>= query in the request. This allows for usages like applying same filters for different feeds.
- =filters= (required): A list of filters to apply to the feed.
  + The feed is going through the filters in the order specified. You can imagine each filter corresponds to an endofunction on the =Feed=.
  + Each filter is an object with the singleton key being the name of the filter and the value being the configuration of the filter.
    - For example, in the filter definition: - =keep_element: .p_mainnew=
      + the filter's name is =keep_element=
      + the configuration is the string value =".p_mainnew"=. Depending on the filter, the configuration can have different types.

** Filters

*** Full Text (=full_text=)

This filter fetches the full HTML of the article from the article's =link= and fill it in the =content= field of the article.

Configuration type: Object

Properties:

- timeout (optional, Duration): The timeout in each individual request. You can specify a string value like ='20s'=. Default to 10 seconds.
- parallelism (optional, number): The number of parallel requests to make. Default to =20=.
- simplify (optional, boolean): Whether to simplify the HTML using =html5ever=. Default to =false=.
- append_mode (optional, boolean): Whether to *append* the full text to the existing content. If not, the content is *replaced* with the full text. Default to =false=.

*** Simplify HTML (=simplify_html=)

This filter simplifies the HTML using =html5ever=.

Configuration type: Object. Only an empty object without property is accepted.

*** Remove HTML elements (=remove_element=)

This filter removes HTML elements matching the CSS selectors.

Configuration type: Array of strings. Each string is a CSS selector.

*** Keep HTML elements (=keep_element=)

This filter keeps HTML elements matching the given CSS selector.

Configuration type: string. The string is a CSS selector.

*** Split (=split=)

This filter splits one article into multiple ones. It is useful for splitting aggregated RSS feeds into individual articles (like [[https://www.daemonology.net/hn-daily/][Hacker News Daily]]).

Each article is split by the given CSS selector. You must specify the css selectors for various fields, including =title=, =link=, =content=, as well as =author=. The =author= field is optional.

Configuration type: Object

Properties:

- title (required, string): The CSS selector for the title.
- link (required, string): The CSS selector for the link.
- content (required, string): The CSS selector for the content.
- author (optional, string): The CSS selector for the author.

The selectors are evaluated against the article's HTML. There is an validation to ensure that all selectors match the same number of elements. Or else the unsplit article is returned.

*** Sanitize text (=sanitize=)

This filter allows you to redact or replace text in the content of the articles.

Configuration type: Array of "operations".

Operations:

- =remove= (string): Remove the matched text.
- =remove_regex= (string): Remove the text matching the given regular expression.
- =replace= (object): Replace the matched text with the given string.
  + keys:
    - =from= (string): The text to replace.
    - =to= (string): The replacement.
- =replace_regex= (object): Replace the text matching the given regular expression with the given string.
  + keys:
    - =from= (string): The regular expression to match. Use =(?<name>...)= for named capture groups.
    - =to= (string): The replacement. Use =$name= to refer to the named captured groups. Or use =$1=, =$2=, etc. to refer to the groups by index.

*** JS (=js=)

This filter allows you to run arbitrary JS code to transform the articles. The JS runtime is built upon bellar's [[https://bellard.org/quickjs/][QuickJS]] (via [[https://github.com/DelSkayn/rquickjs][rquickjs]] lib).

Configuration type: string. The string is the JS code to run.

You must define a function named =update_post= that takes two arguments: =feed= and =post=, where =feed= is the RSS feed and =post= is the article. The function should return the updated =post=. If you want to remove the article, return =null=.

The actual fields of =feed= and =post= can be found in the rss crate: [[https://docs.rs/rss/latest/rss/struct.Channel.html][Feed]], [[https://docs.rs/rss/latest/rss/struct.Item.html][Post]]. But keep in mind that depending on the source and previous filters, you may get different fields. It's best to print out the =feed= and =post= to see what fields are available. The sample =/inspect.xml= endpoint is useful for this purpose.

#+begin_src yaml
  - path: /inspect.xml
    filters:
      - js: |
          function update_post(feed, post) {
            post.content = `<pre>${JSON.stringify(post, null, 2)}</pre>`;
            return post;
          }
#+end_src

There is currently no way to add new articles or modify the feed's properties. These features may be added in the future.

You can use =console.log(string)= function to print debugging info to the stdout.
